/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.platoon.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.platoon.ide.contentassist.antlr.internal.InternalPlatoonParser;
import org.xtext.example.platoon.services.PlatoonGrammarAccess;

public class PlatoonParser extends AbstractContentAssistParser {

	@Inject
	private PlatoonGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPlatoonParser createParser() {
		InternalPlatoonParser result = new InternalPlatoonParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRouteCommandAccess().getAlternatives(), "rule__RouteCommand__Alternatives");
					put(grammarAccess.getVehicleAccess().getAlternatives(), "rule__Vehicle__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getPlatoonAccess().getGroup(), "rule__Platoon__Group__0");
					put(grammarAccess.getPlatoonAccess().getGroup_2(), "rule__Platoon__Group_2__0");
					put(grammarAccess.getRouteAccess().getGroup(), "rule__Route__Group__0");
					put(grammarAccess.getConstraintsAccess().getGroup(), "rule__Constraints__Group__0");
					put(grammarAccess.getLeaderVehicleAccess().getGroup(), "rule__LeaderVehicle__Group__0");
					put(grammarAccess.getFollowingVehicleAccess().getGroup(), "rule__FollowingVehicle__Group__0");
					put(grammarAccess.getForwardAccess().getGroup(), "rule__Forward__Group__0");
					put(grammarAccess.getTurnLeftAccess().getGroup(), "rule__TurnLeft__Group__0");
					put(grammarAccess.getTurnRightAccess().getGroup(), "rule__TurnRight__Group__0");
					put(grammarAccess.getRootAccess().getPlatoonAssignment_0(), "rule__Root__PlatoonAssignment_0");
					put(grammarAccess.getRootAccess().getRouteAssignment_1(), "rule__Root__RouteAssignment_1");
					put(grammarAccess.getRootAccess().getConstraintsAssignment_2(), "rule__Root__ConstraintsAssignment_2");
					put(grammarAccess.getPlatoonAccess().getLeaderVehicleAssignment_1(), "rule__Platoon__LeaderVehicleAssignment_1");
					put(grammarAccess.getPlatoonAccess().getFollowingVehicleAssignment_2_0(), "rule__Platoon__FollowingVehicleAssignment_2_0");
					put(grammarAccess.getPlatoonAccess().getFollowingVehicleAssignment_2_1(), "rule__Platoon__FollowingVehicleAssignment_2_1");
					put(grammarAccess.getRouteAccess().getNameAssignment_1(), "rule__Route__NameAssignment_1");
					put(grammarAccess.getRouteAccess().getRouteCommandsAssignment_3(), "rule__Route__RouteCommandsAssignment_3");
					put(grammarAccess.getRouteAccess().getRouteCommandsAssignment_4(), "rule__Route__RouteCommandsAssignment_4");
					put(grammarAccess.getConstraintsAccess().getLboundAssignment_1(), "rule__Constraints__LboundAssignment_1");
					put(grammarAccess.getConstraintsAccess().getUboundAssignment_5(), "rule__Constraints__UboundAssignment_5");
					put(grammarAccess.getLeaderVehicleAccess().getNameAssignment_1(), "rule__LeaderVehicle__NameAssignment_1");
					put(grammarAccess.getLeaderVehicleAccess().getRouteAssignment_3(), "rule__LeaderVehicle__RouteAssignment_3");
					put(grammarAccess.getFollowingVehicleAccess().getNameAssignment_1(), "rule__FollowingVehicle__NameAssignment_1");
					put(grammarAccess.getFollowingVehicleAccess().getFollowingAssignment_4(), "rule__FollowingVehicle__FollowingAssignment_4");
					put(grammarAccess.getForwardAccess().getDistanceAssignment_2(), "rule__Forward__DistanceAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalPlatoonParser typedParser = (InternalPlatoonParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PlatoonGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PlatoonGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
