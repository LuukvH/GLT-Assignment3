/*
 * generated by Xtext 2.10.0
 */
grammar InternalPlatoon;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.platoon.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.platoon.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.platoon.services.PlatoonGrammarAccess;

}

@parser::members {

 	private PlatoonGrammarAccess grammarAccess;

    public InternalPlatoonParser(TokenStream input, PlatoonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Root";
   	}

   	@Override
   	protected PlatoonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRoot
entryRuleRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootRule()); }
	iv_ruleRoot=ruleRoot
	{ $current=$iv_ruleRoot.current; }
	EOF;

// Rule Root
ruleRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRootAccess().getPlatoonPlatoonParserRuleCall_0_0());
				}
				lv_platoon_0_0=rulePlatoon
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootRule());
					}
					set(
						$current,
						"platoon",
						lv_platoon_0_0,
						"org.xtext.example.platoon.Platoon.Platoon");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRootAccess().getRouteRouteParserRuleCall_1_0());
				}
				lv_route_1_0=ruleRoute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootRule());
					}
					set(
						$current,
						"route",
						lv_route_1_0,
						"org.xtext.example.platoon.Platoon.Route");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRootAccess().getConstraintsConstraintsParserRuleCall_2_0());
				}
				lv_constraints_2_0=ruleConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRootRule());
					}
					set(
						$current,
						"constraints",
						lv_constraints_2_0,
						"org.xtext.example.platoon.Platoon.Constraints");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulerouteCommand
entryRulerouteCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRouteCommandRule()); }
	iv_rulerouteCommand=rulerouteCommand
	{ $current=$iv_rulerouteCommand.current; }
	EOF;

// Rule routeCommand
rulerouteCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRouteCommandAccess().getForwardParserRuleCall_0());
		}
		this_Forward_0=ruleForward
		{
			$current = $this_Forward_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRouteCommandAccess().getTurnLeftParserRuleCall_1());
		}
		this_TurnLeft_1=ruleTurnLeft
		{
			$current = $this_TurnLeft_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRouteCommandAccess().getTurnRightParserRuleCall_2());
		}
		this_TurnRight_2=ruleTurnRight
		{
			$current = $this_TurnRight_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePlatoon
entryRulePlatoon returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlatoonRule()); }
	iv_rulePlatoon=rulePlatoon
	{ $current=$iv_rulePlatoon.current; }
	EOF;

// Rule Platoon
rulePlatoon returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='platoon:'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlatoonAccess().getPlatoonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlatoonAccess().getLeaderVehicleLeaderVehicleParserRuleCall_1_0());
				}
				lv_leaderVehicle_1_0=ruleLeaderVehicle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlatoonRule());
					}
					set(
						$current,
						"leaderVehicle",
						lv_leaderVehicle_1_0,
						"org.xtext.example.platoon.Platoon.LeaderVehicle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPlatoonAccess().getFollowingVehicleFollowingVehicleParserRuleCall_2_0_0());
					}
					lv_followingVehicle_2_0=ruleFollowingVehicle
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlatoonRule());
						}
						add(
							$current,
							"followingVehicle",
							lv_followingVehicle_2_0,
							"org.xtext.example.platoon.Platoon.FollowingVehicle");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlatoonAccess().getFollowingVehicleFollowingVehicleParserRuleCall_2_1_0());
					}
					lv_followingVehicle_3_0=ruleFollowingVehicle
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlatoonRule());
						}
						add(
							$current,
							"followingVehicle",
							lv_followingVehicle_3_0,
							"org.xtext.example.platoon.Platoon.FollowingVehicle");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleRoute
entryRuleRoute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRouteRule()); }
	iv_ruleRoute=ruleRoute
	{ $current=$iv_ruleRoute.current; }
	EOF;

// Rule Route
ruleRoute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='route'
		{
			newLeafNode(otherlv_0, grammarAccess.getRouteAccess().getRouteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.platoon.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRouteAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getRouteCommandsRouteCommandParserRuleCall_3_0());
				}
				lv_routeCommands_3_0=rulerouteCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"routeCommands",
						lv_routeCommands_3_0,
						"org.xtext.example.platoon.Platoon.routeCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRouteAccess().getRouteCommandsRouteCommandParserRuleCall_4_0());
				}
				lv_routeCommands_4_0=rulerouteCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRouteRule());
					}
					add(
						$current,
						"routeCommands",
						lv_routeCommands_4_0,
						"org.xtext.example.platoon.Platoon.routeCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstraints
entryRuleConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintsRule()); }
	iv_ruleConstraints=ruleConstraints
	{ $current=$iv_ruleConstraints.current; }
	EOF;

// Rule Constraints
ruleConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraints:'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstraintsAccess().getConstraintsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsAccess().getLboundEIntParserRuleCall_1_0());
				}
				lv_lbound_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsRule());
					}
					set(
						$current,
						"lbound",
						lv_lbound_1_0,
						"org.xtext.example.platoon.Platoon.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<='
		{
			newLeafNode(otherlv_2, grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_2());
		}
		otherlv_3='headway'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstraintsAccess().getHeadwayKeyword_3());
		}
		otherlv_4='<='
		{
			newLeafNode(otherlv_4, grammarAccess.getConstraintsAccess().getLessThanSignEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstraintsAccess().getUboundEIntParserRuleCall_5_0());
				}
				lv_ubound_5_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstraintsRule());
					}
					set(
						$current,
						"ubound",
						lv_ubound_5_0,
						"org.xtext.example.platoon.Platoon.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLeaderVehicle
entryRuleLeaderVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeaderVehicleRule()); }
	iv_ruleLeaderVehicle=ruleLeaderVehicle
	{ $current=$iv_ruleLeaderVehicle.current; }
	EOF;

// Rule LeaderVehicle
ruleLeaderVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LV'
		{
			newLeafNode(otherlv_0, grammarAccess.getLeaderVehicleAccess().getLVKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeaderVehicleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeaderVehicleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.platoon.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='route'
		{
			newLeafNode(otherlv_2, grammarAccess.getLeaderVehicleAccess().getRouteKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLeaderVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getLeaderVehicleAccess().getRouteRouteCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFollowingVehicle
entryRuleFollowingVehicle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFollowingVehicleRule()); }
	iv_ruleFollowingVehicle=ruleFollowingVehicle
	{ $current=$iv_ruleFollowingVehicle.current; }
	EOF;

// Rule FollowingVehicle
ruleFollowingVehicle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FV'
		{
			newLeafNode(otherlv_0, grammarAccess.getFollowingVehicleAccess().getFVKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFollowingVehicleAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFollowingVehicleRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.example.platoon.Platoon.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='front'
		{
			newLeafNode(otherlv_2, grammarAccess.getFollowingVehicleAccess().getFrontKeyword_2());
		}
		otherlv_3='runner'
		{
			newLeafNode(otherlv_3, grammarAccess.getFollowingVehicleAccess().getRunnerKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFollowingVehicleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFollowingVehicleAccess().getFollowingVehicleCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleForward
entryRuleForward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardRule()); }
	iv_ruleForward=ruleForward
	{ $current=$iv_ruleForward.current; }
	EOF;

// Rule Forward
ruleForward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='forward'
		{
			newLeafNode(otherlv_0, grammarAccess.getForwardAccess().getForwardKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForwardAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForwardAccess().getDistanceEIntParserRuleCall_2_0());
				}
				lv_distance_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForwardRule());
					}
					set(
						$current,
						"distance",
						lv_distance_2_0,
						"org.xtext.example.platoon.Platoon.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getForwardAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTurnLeft
entryRuleTurnLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnLeftRule()); }
	iv_ruleTurnLeft=ruleTurnLeft
	{ $current=$iv_ruleTurnLeft.current; }
	EOF;

// Rule TurnLeft
ruleTurnLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnLeftAccess().getTurnLeftAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnLeftAccess().getTurnKeyword_1());
		}
		otherlv_2='Left'
		{
			newLeafNode(otherlv_2, grammarAccess.getTurnLeftAccess().getLeftKeyword_2());
		}
	)
;

// Entry rule entryRuleTurnRight
entryRuleTurnRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnRightRule()); }
	iv_ruleTurnRight=ruleTurnRight
	{ $current=$iv_ruleTurnRight.current; }
	EOF;

// Rule TurnRight
ruleTurnRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTurnRightAccess().getTurnRightAction_0(),
					$current);
			}
		)
		otherlv_1='turn'
		{
			newLeafNode(otherlv_1, grammarAccess.getTurnRightAccess().getTurnKeyword_1());
		}
		otherlv_2='Right'
		{
			newLeafNode(otherlv_2, grammarAccess.getTurnRightAccess().getRightKeyword_2());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEIntAccess().getINTTerminalRuleCall());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
