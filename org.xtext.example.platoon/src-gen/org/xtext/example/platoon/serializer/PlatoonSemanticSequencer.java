/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.platoon.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.platoon.services.PlatoonGrammarAccess;
import platoon.Constraints;
import platoon.FollowingVehicle;
import platoon.Forward;
import platoon.LeaderVehicle;
import platoon.Platoon;
import platoon.PlatoonPackage;
import platoon.Root;
import platoon.Route;
import platoon.TurnLeft;
import platoon.TurnRight;

@SuppressWarnings("all")
public class PlatoonSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PlatoonGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PlatoonPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PlatoonPackage.CONSTRAINTS:
				sequence_Constraints(context, (Constraints) semanticObject); 
				return; 
			case PlatoonPackage.FOLLOWING_VEHICLE:
				sequence_FollowingVehicle(context, (FollowingVehicle) semanticObject); 
				return; 
			case PlatoonPackage.FORWARD:
				sequence_Forward(context, (Forward) semanticObject); 
				return; 
			case PlatoonPackage.LEADER_VEHICLE:
				sequence_LeaderVehicle(context, (LeaderVehicle) semanticObject); 
				return; 
			case PlatoonPackage.PLATOON:
				sequence_Platoon(context, (Platoon) semanticObject); 
				return; 
			case PlatoonPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case PlatoonPackage.ROUTE:
				sequence_Route(context, (Route) semanticObject); 
				return; 
			case PlatoonPackage.TURN_LEFT:
				sequence_TurnLeft(context, (TurnLeft) semanticObject); 
				return; 
			case PlatoonPackage.TURN_RIGHT:
				sequence_TurnRight(context, (TurnRight) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Constraints returns Constraints
	 *
	 * Constraint:
	 *     (lbound=EInt ubound=EInt)
	 */
	protected void sequence_Constraints(ISerializationContext context, Constraints semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.CONSTRAINTS__LBOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.CONSTRAINTS__LBOUND));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.CONSTRAINTS__UBOUND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.CONSTRAINTS__UBOUND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintsAccess().getLboundEIntParserRuleCall_1_0(), semanticObject.getLbound());
		feeder.accept(grammarAccess.getConstraintsAccess().getUboundEIntParserRuleCall_5_0(), semanticObject.getUbound());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vehicle returns FollowingVehicle
	 *     FollowingVehicle returns FollowingVehicle
	 *
	 * Constraint:
	 *     (name=EString following=[Vehicle|EString])
	 */
	protected void sequence_FollowingVehicle(ISerializationContext context, FollowingVehicle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.FOLLOWING_VEHICLE__FOLLOWING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.FOLLOWING_VEHICLE__FOLLOWING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFollowingVehicleAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFollowingVehicleAccess().getFollowingVehicleEStringParserRuleCall_4_0_1(), semanticObject.getFollowing());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     routeCommand returns Forward
	 *     Forward returns Forward
	 *
	 * Constraint:
	 *     distance=EInt
	 */
	protected void sequence_Forward(ISerializationContext context, Forward semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.FORWARD__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.FORWARD__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForwardAccess().getDistanceEIntParserRuleCall_2_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vehicle returns LeaderVehicle
	 *     LeaderVehicle returns LeaderVehicle
	 *
	 * Constraint:
	 *     (name=EString route=[Route|EString])
	 */
	protected void sequence_LeaderVehicle(ISerializationContext context, LeaderVehicle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.VEHICLE__NAME));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.LEADER_VEHICLE__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.LEADER_VEHICLE__ROUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeaderVehicleAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLeaderVehicleAccess().getRouteRouteEStringParserRuleCall_3_0_1(), semanticObject.getRoute());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Platoon returns Platoon
	 *
	 * Constraint:
	 *     (leaderVehicle=LeaderVehicle (followingVehicle+=FollowingVehicle followingVehicle+=FollowingVehicle*)?)
	 */
	protected void sequence_Platoon(ISerializationContext context, Platoon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (platoon=Platoon route=Route constraints=Constraints)
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.ROOT__PLATOON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.ROOT__PLATOON));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.ROOT__ROUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.ROOT__ROUTE));
			if (transientValues.isValueTransient(semanticObject, PlatoonPackage.Literals.ROOT__CONSTRAINTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlatoonPackage.Literals.ROOT__CONSTRAINTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRootAccess().getPlatoonPlatoonParserRuleCall_0_0(), semanticObject.getPlatoon());
		feeder.accept(grammarAccess.getRootAccess().getRouteRouteParserRuleCall_1_0(), semanticObject.getRoute());
		feeder.accept(grammarAccess.getRootAccess().getConstraintsConstraintsParserRuleCall_2_0(), semanticObject.getConstraints());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Route returns Route
	 *
	 * Constraint:
	 *     (name=EString routeCommands+=routeCommand routeCommands+=routeCommand*)
	 */
	protected void sequence_Route(ISerializationContext context, Route semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     routeCommand returns TurnLeft
	 *     TurnLeft returns TurnLeft
	 *
	 * Constraint:
	 *     {TurnLeft}
	 */
	protected void sequence_TurnLeft(ISerializationContext context, TurnLeft semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     routeCommand returns TurnRight
	 *     TurnRight returns TurnRight
	 *
	 * Constraint:
	 *     {TurnRight}
	 */
	protected void sequence_TurnRight(ISerializationContext context, TurnRight semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
