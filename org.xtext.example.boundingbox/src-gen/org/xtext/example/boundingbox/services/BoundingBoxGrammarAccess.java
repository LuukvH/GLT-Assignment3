/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.boundingbox.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BoundingBoxGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WorldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.boundingbox.BoundingBox.World");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorldAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMoveCommandsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMoveCommandsMoveParserRuleCall_3_0_0 = (RuleCall)cMoveCommandsAssignment_3_0.eContents().get(0);
		private final Assignment cMoveCommandsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMoveCommandsMoveParserRuleCall_3_1_0 = (RuleCall)cMoveCommandsAssignment_3_1.eContents().get(0);
		
		//World:
		//	{World}
		//	'Box'
		//	':' (moveCommands+=Move moveCommands+=Move*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{World} 'Box' ':' (moveCommands+=Move moveCommands+=Move*)?
		public Group getGroup() { return cGroup; }
		
		//{World}
		public Action getWorldAction_0() { return cWorldAction_0; }
		
		//'Box'
		public Keyword getBoxKeyword_1() { return cBoxKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(moveCommands+=Move moveCommands+=Move*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//moveCommands+=Move
		public Assignment getMoveCommandsAssignment_3_0() { return cMoveCommandsAssignment_3_0; }
		
		//Move
		public RuleCall getMoveCommandsMoveParserRuleCall_3_0_0() { return cMoveCommandsMoveParserRuleCall_3_0_0; }
		
		//moveCommands+=Move*
		public Assignment getMoveCommandsAssignment_3_1() { return cMoveCommandsAssignment_3_1; }
		
		//Move
		public RuleCall getMoveCommandsMoveParserRuleCall_3_1_0() { return cMoveCommandsMoveParserRuleCall_3_1_0; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.boundingbox.BoundingBox.Move");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveLeftParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveRightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoveUpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMoveDownParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Move:
		//	MoveLeft | MoveRight | MoveUp | MoveDown;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveLeft | MoveRight | MoveUp | MoveDown
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveLeft
		public RuleCall getMoveLeftParserRuleCall_0() { return cMoveLeftParserRuleCall_0; }
		
		//MoveRight
		public RuleCall getMoveRightParserRuleCall_1() { return cMoveRightParserRuleCall_1; }
		
		//MoveUp
		public RuleCall getMoveUpParserRuleCall_2() { return cMoveUpParserRuleCall_2; }
		
		//MoveDown
		public RuleCall getMoveDownParserRuleCall_3() { return cMoveDownParserRuleCall_3; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.boundingbox.BoundingBox.EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt ecore::EInt:
		//	INT
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class MoveLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.boundingbox.BoundingBox.MoveLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceEIntParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//MoveLeft:
		//	'left' distance=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'left' distance=EInt
		public Group getGroup() { return cGroup; }
		
		//'left'
		public Keyword getLeftKeyword_0() { return cLeftKeyword_0; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_1_0() { return cDistanceEIntParserRuleCall_1_0; }
	}
	public class MoveRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.boundingbox.BoundingBox.MoveRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceEIntParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//MoveRight:
		//	'right' distance=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'right' distance=EInt
		public Group getGroup() { return cGroup; }
		
		//'right'
		public Keyword getRightKeyword_0() { return cRightKeyword_0; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_1_0() { return cDistanceEIntParserRuleCall_1_0; }
	}
	public class MoveUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.boundingbox.BoundingBox.MoveUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceEIntParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//MoveUp:
		//	'up' distance=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'up' distance=EInt
		public Group getGroup() { return cGroup; }
		
		//'up'
		public Keyword getUpKeyword_0() { return cUpKeyword_0; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_1_0() { return cDistanceEIntParserRuleCall_1_0; }
	}
	public class MoveDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.boundingbox.BoundingBox.MoveDown");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDownKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDistanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDistanceEIntParserRuleCall_1_0 = (RuleCall)cDistanceAssignment_1.eContents().get(0);
		
		//MoveDown:
		//	'down' distance=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//'down' distance=EInt
		public Group getGroup() { return cGroup; }
		
		//'down'
		public Keyword getDownKeyword_0() { return cDownKeyword_0; }
		
		//distance=EInt
		public Assignment getDistanceAssignment_1() { return cDistanceAssignment_1; }
		
		//EInt
		public RuleCall getDistanceEIntParserRuleCall_1_0() { return cDistanceEIntParserRuleCall_1_0; }
	}
	
	
	private final WorldElements pWorld;
	private final MoveElements pMove;
	private final EIntElements pEInt;
	private final MoveLeftElements pMoveLeft;
	private final MoveRightElements pMoveRight;
	private final MoveUpElements pMoveUp;
	private final MoveDownElements pMoveDown;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BoundingBoxGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWorld = new WorldElements();
		this.pMove = new MoveElements();
		this.pEInt = new EIntElements();
		this.pMoveLeft = new MoveLeftElements();
		this.pMoveRight = new MoveRightElements();
		this.pMoveUp = new MoveUpElements();
		this.pMoveDown = new MoveDownElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.boundingbox.BoundingBox".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//World:
	//	{World}
	//	'Box'
	//	':' (moveCommands+=Move moveCommands+=Move*)?;
	public WorldElements getWorldAccess() {
		return pWorld;
	}
	
	public ParserRule getWorldRule() {
		return getWorldAccess().getRule();
	}
	
	//Move:
	//	MoveLeft | MoveRight | MoveUp | MoveDown;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//MoveLeft:
	//	'left' distance=EInt;
	public MoveLeftElements getMoveLeftAccess() {
		return pMoveLeft;
	}
	
	public ParserRule getMoveLeftRule() {
		return getMoveLeftAccess().getRule();
	}
	
	//MoveRight:
	//	'right' distance=EInt;
	public MoveRightElements getMoveRightAccess() {
		return pMoveRight;
	}
	
	public ParserRule getMoveRightRule() {
		return getMoveRightAccess().getRule();
	}
	
	//MoveUp:
	//	'up' distance=EInt;
	public MoveUpElements getMoveUpAccess() {
		return pMoveUp;
	}
	
	public ParserRule getMoveUpRule() {
		return getMoveUpAccess().getRule();
	}
	
	//MoveDown:
	//	'down' distance=EInt;
	public MoveDownElements getMoveDownAccess() {
		return pMoveDown;
	}
	
	public ParserRule getMoveDownRule() {
		return getMoveDownAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
